/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */
import org.apache.commons.codec.binary.Base64

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation("org.junit.jupiter:junit-jupiter:5.7.2")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:30.1.1-jre")

    implementation(project(":project-a"))
    implementation(project(":project-b"))

}

application {
    // Define the main class for the application.
    mainClass.set("basic.gradle.App")
}

tasks.test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Run: gradle
defaultTasks("hello")

// Run: gradle upper
tasks.register("upper") {
    doLast {
        val someString = "mY_nAmE"
        println("Original: $someString")
        println("Upper case: ${someString.toUpperCase()}")
    }
}

// Run: gradle count
tasks.register("count") {
    doLast {
        repeat(4) { print("$it ") }
    }
}

// Run: gradle intro
tasks.register("intro") {
    dependsOn("hello")
    doLast {
        println("I'm Gradle")
    }
}

// Run: gradle task1
repeat(4) { counter ->
    tasks.register("task$counter") {
        doLast {
            println("I'm task number $counter")
        }
    }
}

// Run: gradle task0
tasks.named("task0") { dependsOn("task2", "task3") }

// Run: gradle loadfile
tasks.register("loadfile") {
    doLast {
        val files = file("../.").listFiles().sorted()
        files.forEach { file ->
            if (file.isFile) {
                ant.withGroovyBuilder {
                    "loadfile"("srcFile" to file, "property" to file.name)
                }
                println(" *** ${file.name} ***")
                println("${ant.properties[file.name]}")
            }
        }
    }
}

// Run: gradle encode
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        "classpath"(group = "commons-codec", name = "commons-codec", version = "1.2")
    }
}

tasks.register("encode") {
    doLast {
        val encodedString = Base64().encode("hello world\n".toByteArray())
        println(String(encodedString))
    }
}

// Example 1. Defining tasks using strings for task names
tasks.register("hello") {
    doLast {
        println("hello")
    }
}

tasks.register<Copy>("copy") {
    from(file("srcDir"))
    into(buildDir)
}

// Example 2. Assigning tasks to variables with DSL specific syntax
val hello1 by tasks.registering {
    doLast {
        println("hello")
    }
}

val copy1 by tasks.registering(Copy::class) {
    from(file("srcDir"))
    into(buildDir)
}

// Example 3. Accessing tasks via tasks collection
println(tasks.named("hello").get().name) // or just 'tasks.hello' if the task was added by a plugin

println(tasks.named<Copy>("copy").get().destinationDir)

// Example 4. Accessing tasks by their type
tasks.withType<Tar>().configureEach {
    enabled = false
}

tasks.register("test1") {
    dependsOn(tasks.withType<Copy>())
}

// Example 5. Accessing tasks by path
// Run: gradle -q hello
println(tasks.getByPath("hello").path)
//println(tasks.getByPath("project-a:hello").path)
